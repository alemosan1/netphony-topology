/*
 * tapi-topology API
 * tapi-topology API generated from tapi-topology.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.tid.topologyModuleBase.TAPITopoModel.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.AdminStatePac;
import es.tid.topologyModuleBase.TAPITopoModel.model.LayerProtocol;
import es.tid.topologyModuleBase.TAPITopoModel.model.NameAndValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.ResourceSpec;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers.  The structure of LTP supports all transport protocols including circuit and packet forms.
 */
@ApiModel(description = "The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers.  The structure of LTP supports all transport protocols including circuit and packet forms.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-03-31T10:56:12.255Z")
public class NodeEdgePoint   {
  @JsonProperty("label")
  private List<NameAndValue> label = new ArrayList<NameAndValue>();

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("name")
  private List<NameAndValue> name = new ArrayList<NameAndValue>();

  /**
   * Gets or Sets terminationDirection
   */
  public enum TerminationDirectionEnum {
    BIDIRECTIONAL("bidirectional"),
    
    SINK("sink"),
    
    SOURCE("source"),
    
    UNDEFINED_OR_UNKNOWN("undefined-or-unknown");

    private String value;

    TerminationDirectionEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TerminationDirectionEnum fromValue(String text) {
      for (TerminationDirectionEnum b : TerminationDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("termination-direction")
  private TerminationDirectionEnum terminationDirection = null;

  @JsonProperty("layer-protocol")
  private List<LayerProtocol> layerProtocol = new ArrayList<LayerProtocol>();

  @JsonProperty("mapped-service-interface-point")
  private List<String> mappedServiceInterfacePoint = new ArrayList<String>();

  @JsonProperty("state")
  private AdminStatePac state = null;

  /**
   * The orientation of defined flow at the LinkEnd.
   */
  public enum LinkPortDirectionEnum {
    BIDIRECTIONAL("bidirectional"),
    
    INPUT("input"),
    
    OUTPUT("output"),
    
    UNIDENTIFIED_OR_UNKNOWN("unidentified-or-unknown");

    private String value;

    LinkPortDirectionEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LinkPortDirectionEnum fromValue(String text) {
      for (LinkPortDirectionEnum b : LinkPortDirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("link-port-direction")
  private LinkPortDirectionEnum linkPortDirection = null;

  @JsonProperty("aggregated-node-edge-point")
  private List<String> aggregatedNodeEdgePoint = new ArrayList<String>();

  /**
   * Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. 
   */
  public enum LinkPortRoleEnum {
    SYMMETRIC("symmetric"),
    
    ROOT("root"),
    
    LEAF("leaf"),
    
    UNKNOWN("unknown");

    private String value;

    LinkPortRoleEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LinkPortRoleEnum fromValue(String text) {
      for (LinkPortRoleEnum b : LinkPortRoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("link-port-role")
  private LinkPortRoleEnum linkPortRole = null;

  public NodeEdgePoint label(List<NameAndValue> label) {
    this.label = label;
    return this;
  }

  public NodeEdgePoint addLabelItem(NameAndValue labelItem) {
    this.label.add(labelItem);
    return this;
  }

   /**
   * List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.
   * @return label
  **/
  @JsonProperty("label")
  @ApiModelProperty(value = "List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.")
  public List<NameAndValue> getLabel() {
    return label;
  }

  public void setLabel(List<NameAndValue> label) {
    this.label = label;
  }

  public NodeEdgePoint uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
  **/
  @JsonProperty("uuid")
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public NodeEdgePoint name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public NodeEdgePoint addNameItem(NameAndValue nameItem) {
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @JsonProperty("name")
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public NodeEdgePoint terminationDirection(TerminationDirectionEnum terminationDirection) {
    this.terminationDirection = terminationDirection;
    return this;
  }

   /**
   * Get terminationDirection
   * @return terminationDirection
  **/
  @JsonProperty("termination-direction")
  @ApiModelProperty(value = "")
  public TerminationDirectionEnum getTerminationDirection() {
    return terminationDirection;
  }

  public void setTerminationDirection(TerminationDirectionEnum terminationDirection) {
    this.terminationDirection = terminationDirection;
  }

  public NodeEdgePoint layerProtocol(List<LayerProtocol> layerProtocol) {
    this.layerProtocol = layerProtocol;
    return this;
  }

  public NodeEdgePoint addLayerProtocolItem(LayerProtocol layerProtocolItem) {
    this.layerProtocol.add(layerProtocolItem);
    return this;
  }

   /**
   * Get layerProtocol
   * @return layerProtocol
  **/
  @JsonProperty("layer-protocol")
  @ApiModelProperty(value = "")
  public List<LayerProtocol> getLayerProtocol() {
    return layerProtocol;
  }

  public void setLayerProtocol(List<LayerProtocol> layerProtocol) {
    this.layerProtocol = layerProtocol;
  }

  public NodeEdgePoint mappedServiceInterfacePoint(List<String> mappedServiceInterfacePoint) {
    this.mappedServiceInterfacePoint = mappedServiceInterfacePoint;
    return this;
  }

  public NodeEdgePoint addMappedServiceInterfacePointItem(String mappedServiceInterfacePointItem) {
    this.mappedServiceInterfacePoint.add(mappedServiceInterfacePointItem);
    return this;
  }

   /**
   * Get mappedServiceInterfacePoint
   * @return mappedServiceInterfacePoint
  **/
  @JsonProperty("mapped-service-interface-point")
  @ApiModelProperty(value = "")
  public List<String> getMappedServiceInterfacePoint() {
    return mappedServiceInterfacePoint;
  }

  public void setMappedServiceInterfacePoint(List<String> mappedServiceInterfacePoint) {
    this.mappedServiceInterfacePoint = mappedServiceInterfacePoint;
  }

  public NodeEdgePoint state(AdminStatePac state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @JsonProperty("state")
  @ApiModelProperty(value = "")
  public AdminStatePac getState() {
    return state;
  }

  public void setState(AdminStatePac state) {
    this.state = state;
  }

  public NodeEdgePoint linkPortDirection(LinkPortDirectionEnum linkPortDirection) {
    this.linkPortDirection = linkPortDirection;
    return this;
  }

   /**
   * The orientation of defined flow at the LinkEnd.
   * @return linkPortDirection
  **/
  @JsonProperty("link-port-direction")
  @ApiModelProperty(value = "The orientation of defined flow at the LinkEnd.")
  public LinkPortDirectionEnum getLinkPortDirection() {
    return linkPortDirection;
  }

  public void setLinkPortDirection(LinkPortDirectionEnum linkPortDirection) {
    this.linkPortDirection = linkPortDirection;
  }

  public NodeEdgePoint aggregatedNodeEdgePoint(List<String> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
    return this;
  }

  public NodeEdgePoint addAggregatedNodeEdgePointItem(String aggregatedNodeEdgePointItem) {
    this.aggregatedNodeEdgePoint.add(aggregatedNodeEdgePointItem);
    return this;
  }

   /**
   * Get aggregatedNodeEdgePoint
   * @return aggregatedNodeEdgePoint
  **/
  @JsonProperty("aggregated-node-edge-point")
  @ApiModelProperty(value = "")
  public List<String> getAggregatedNodeEdgePoint() {
    return aggregatedNodeEdgePoint;
  }

  public void setAggregatedNodeEdgePoint(List<String> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
  }

  public NodeEdgePoint linkPortRole(LinkPortRoleEnum linkPortRole) {
    this.linkPortRole = linkPortRole;
    return this;
  }

   /**
   * Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. 
   * @return linkPortRole
  **/
  @JsonProperty("link-port-role")
  @ApiModelProperty(value = "Each LinkEnd of the Link has a role (e.g., symmetric, hub, spoke, leaf, root)  in the context of the Link with respect to the Link function. ")
  public LinkPortRoleEnum getLinkPortRole() {
    return linkPortRole;
  }

  public void setLinkPortRole(LinkPortRoleEnum linkPortRole) {
    this.linkPortRole = linkPortRole;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeEdgePoint nodeEdgePoint = (NodeEdgePoint) o;
    return Objects.equals(this.label, nodeEdgePoint.label) &&
        Objects.equals(this.uuid, nodeEdgePoint.uuid) &&
        Objects.equals(this.name, nodeEdgePoint.name) &&
        Objects.equals(this.terminationDirection, nodeEdgePoint.terminationDirection) &&
        Objects.equals(this.layerProtocol, nodeEdgePoint.layerProtocol) &&
        Objects.equals(this.mappedServiceInterfacePoint, nodeEdgePoint.mappedServiceInterfacePoint) &&
        Objects.equals(this.state, nodeEdgePoint.state) &&
        Objects.equals(this.linkPortDirection, nodeEdgePoint.linkPortDirection) &&
        Objects.equals(this.aggregatedNodeEdgePoint, nodeEdgePoint.aggregatedNodeEdgePoint) &&
        Objects.equals(this.linkPortRole, nodeEdgePoint.linkPortRole);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, uuid, name, terminationDirection, layerProtocol, mappedServiceInterfacePoint, state, linkPortDirection, aggregatedNodeEdgePoint, linkPortRole);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeEdgePoint {\n");
    
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    terminationDirection: ").append(toIndentedString(terminationDirection)).append("\n");
    sb.append("    layerProtocol: ").append(toIndentedString(layerProtocol)).append("\n");
    sb.append("    mappedServiceInterfacePoint: ").append(toIndentedString(mappedServiceInterfacePoint)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    linkPortDirection: ").append(toIndentedString(linkPortDirection)).append("\n");
    sb.append("    aggregatedNodeEdgePoint: ").append(toIndentedString(aggregatedNodeEdgePoint)).append("\n");
    sb.append("    linkPortRole: ").append(toIndentedString(linkPortRole)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

