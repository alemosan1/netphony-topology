/*
 * tapi-topology API
 * tapi-topology API generated from tapi-topology.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.tid.topologyModuleBase.TAPITopoModel.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.AdminStatePac;
import es.tid.topologyModuleBase.TAPITopoModel.model.NameAndValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.NodeEdgePoint;
import es.tid.topologyModuleBase.TAPITopoModel.model.ResourceSpec;
import es.tid.topologyModuleBase.TAPITopoModel.model.TransferCapacityPac;
import es.tid.topologyModuleBase.TAPITopoModel.model.TransferCostPac;
import es.tid.topologyModuleBase.TAPITopoModel.model.TransferIntegrityPac;
import es.tid.topologyModuleBase.TAPITopoModel.model.TransferTimingPac;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * The ForwardingDomain (FD) object class models the “ForwardingDomain” topological component which is used to effect forwarding of transport characteristic information and offers the potential to enable forwarding.  At the lowest level of recursion, an FD (within a network element (NE)) represents a switch matrix (i.e., a fabric). Note that an NE can encompass multiple switch matrices (FDs). 
 */
@ApiModel(description = "The ForwardingDomain (FD) object class models the “ForwardingDomain” topological component which is used to effect forwarding of transport characteristic information and offers the potential to enable forwarding.  At the lowest level of recursion, an FD (within a network element (NE)) represents a switch matrix (i.e., a fabric). Note that an NE can encompass multiple switch matrices (FDs). ")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-03-31T10:56:12.255Z")
public class Node   {
  @JsonProperty("label")
  private List<NameAndValue> label = new ArrayList<NameAndValue>();

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("name")
  private List<NameAndValue> name = new ArrayList<NameAndValue>();

  /**
   * Gets or Sets layerProtocolName
   */
  public enum LayerProtocolNameEnum {
    OCH("och"),
    
    ODU("odu"),
    
    ETH("eth"),
    
    MPLS_TP("mpls-tp");

    private String value;

    LayerProtocolNameEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LayerProtocolNameEnum fromValue(String text) {
      for (LayerProtocolNameEnum b : LayerProtocolNameEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("layer-protocol-name")
  private List<LayerProtocolNameEnum> layerProtocolName = new ArrayList<LayerProtocolNameEnum>();

  @JsonProperty("transfer-integrity")
  private TransferIntegrityPac transferIntegrity = null;

  @JsonProperty("state")
  private AdminStatePac state = null;

  @JsonProperty("transfer-capacity")
  private TransferCapacityPac transferCapacity = null;

  @JsonProperty("transfer-cost")
  private TransferCostPac transferCost = null;

  @JsonProperty("aggregated-node-edge-point")
  private List<String> aggregatedNodeEdgePoint = new ArrayList<String>();

  @JsonProperty("owned-node-edge-point")
  private List<NodeEdgePoint> ownedNodeEdgePoint = new ArrayList<NodeEdgePoint>();

  @JsonProperty("transfer-timing")
  private TransferTimingPac transferTiming = null;

  @JsonProperty("encap-topology")
  private String encapTopology = null;

  public Node label(List<NameAndValue> label) {
    this.label = label;
    return this;
  }

  public Node addLabelItem(NameAndValue labelItem) {
    this.label.add(labelItem);
    return this;
  }

   /**
   * List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.
   * @return label
  **/
  @JsonProperty("label")
  @ApiModelProperty(value = "List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.")
  public List<NameAndValue> getLabel() {
    return label;
  }

  public void setLabel(List<NameAndValue> label) {
    this.label = label;
  }

  public Node uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
  **/
  @JsonProperty("uuid")
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public Node name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public Node addNameItem(NameAndValue nameItem) {
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @JsonProperty("name")
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public Node layerProtocolName(List<LayerProtocolNameEnum> layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
    return this;
  }

  public Node addLayerProtocolNameItem(LayerProtocolNameEnum layerProtocolNameItem) {
    this.layerProtocolName.add(layerProtocolNameItem);
    return this;
  }

   /**
   * Get layerProtocolName
   * @return layerProtocolName
  **/
  @JsonProperty("layer-protocol-name")
  @ApiModelProperty(value = "")
  public List<LayerProtocolNameEnum> getLayerProtocolName() {
    return layerProtocolName;
  }

  public void setLayerProtocolName(List<LayerProtocolNameEnum> layerProtocolName) {
    this.layerProtocolName = layerProtocolName;
  }

  public Node transferIntegrity(TransferIntegrityPac transferIntegrity) {
    this.transferIntegrity = transferIntegrity;
    return this;
  }

   /**
   * Get transferIntegrity
   * @return transferIntegrity
  **/
  @JsonProperty("transfer-integrity")
  @ApiModelProperty(value = "")
  public TransferIntegrityPac getTransferIntegrity() {
    return transferIntegrity;
  }

  public void setTransferIntegrity(TransferIntegrityPac transferIntegrity) {
    this.transferIntegrity = transferIntegrity;
  }

  public Node state(AdminStatePac state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @JsonProperty("state")
  @ApiModelProperty(value = "")
  public AdminStatePac getState() {
    return state;
  }

  public void setState(AdminStatePac state) {
    this.state = state;
  }

  public Node transferCapacity(TransferCapacityPac transferCapacity) {
    this.transferCapacity = transferCapacity;
    return this;
  }

   /**
   * Get transferCapacity
   * @return transferCapacity
  **/
  @JsonProperty("transfer-capacity")
  @ApiModelProperty(value = "")
  public TransferCapacityPac getTransferCapacity() {
    return transferCapacity;
  }

  public void setTransferCapacity(TransferCapacityPac transferCapacity) {
    this.transferCapacity = transferCapacity;
  }

  public Node transferCost(TransferCostPac transferCost) {
    this.transferCost = transferCost;
    return this;
  }

   /**
   * Get transferCost
   * @return transferCost
  **/
  @JsonProperty("transfer-cost")
  @ApiModelProperty(value = "")
  public TransferCostPac getTransferCost() {
    return transferCost;
  }

  public void setTransferCost(TransferCostPac transferCost) {
    this.transferCost = transferCost;
  }

  public Node aggregatedNodeEdgePoint(List<String> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
    return this;
  }

  public Node addAggregatedNodeEdgePointItem(String aggregatedNodeEdgePointItem) {
    this.aggregatedNodeEdgePoint.add(aggregatedNodeEdgePointItem);
    return this;
  }

   /**
   * Get aggregatedNodeEdgePoint
   * @return aggregatedNodeEdgePoint
  **/
  @JsonProperty("aggregated-node-edge-point")
  @ApiModelProperty(value = "")
  public List<String> getAggregatedNodeEdgePoint() {
    return aggregatedNodeEdgePoint;
  }

  public void setAggregatedNodeEdgePoint(List<String> aggregatedNodeEdgePoint) {
    this.aggregatedNodeEdgePoint = aggregatedNodeEdgePoint;
  }

  public Node ownedNodeEdgePoint(List<NodeEdgePoint> ownedNodeEdgePoint) {
    this.ownedNodeEdgePoint = ownedNodeEdgePoint;
    return this;
  }

  public Node addOwnedNodeEdgePointItem(NodeEdgePoint ownedNodeEdgePointItem) {
    this.ownedNodeEdgePoint.add(ownedNodeEdgePointItem);
    return this;
  }

   /**
   * Get ownedNodeEdgePoint
   * @return ownedNodeEdgePoint
  **/
  @JsonProperty("owned-node-edge-point")
  @ApiModelProperty(value = "")
  public List<NodeEdgePoint> getOwnedNodeEdgePoint() {
    return ownedNodeEdgePoint;
  }

  public void setOwnedNodeEdgePoint(List<NodeEdgePoint> ownedNodeEdgePoint) {
    this.ownedNodeEdgePoint = ownedNodeEdgePoint;
  }

  public Node transferTiming(TransferTimingPac transferTiming) {
    this.transferTiming = transferTiming;
    return this;
  }

   /**
   * Get transferTiming
   * @return transferTiming
  **/
  @JsonProperty("transfer-timing")
  @ApiModelProperty(value = "")
  public TransferTimingPac getTransferTiming() {
    return transferTiming;
  }

  public void setTransferTiming(TransferTimingPac transferTiming) {
    this.transferTiming = transferTiming;
  }

  public Node encapTopology(String encapTopology) {
    this.encapTopology = encapTopology;
    return this;
  }

   /**
   * Get encapTopology
   * @return encapTopology
  **/
  @JsonProperty("encap-topology")
  @ApiModelProperty(value = "")
  public String getEncapTopology() {
    return encapTopology;
  }

  public void setEncapTopology(String encapTopology) {
    this.encapTopology = encapTopology;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Node node = (Node) o;
    return Objects.equals(this.label, node.label) &&
        Objects.equals(this.uuid, node.uuid) &&
        Objects.equals(this.name, node.name) &&
        Objects.equals(this.layerProtocolName, node.layerProtocolName) &&
        Objects.equals(this.transferIntegrity, node.transferIntegrity) &&
        Objects.equals(this.state, node.state) &&
        Objects.equals(this.transferCapacity, node.transferCapacity) &&
        Objects.equals(this.transferCost, node.transferCost) &&
        Objects.equals(this.aggregatedNodeEdgePoint, node.aggregatedNodeEdgePoint) &&
        Objects.equals(this.ownedNodeEdgePoint, node.ownedNodeEdgePoint) &&
        Objects.equals(this.transferTiming, node.transferTiming) &&
        Objects.equals(this.encapTopology, node.encapTopology);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, uuid, name, layerProtocolName, transferIntegrity, state, transferCapacity, transferCost, aggregatedNodeEdgePoint, ownedNodeEdgePoint, transferTiming, encapTopology);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Node {\n");
    
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    layerProtocolName: ").append(toIndentedString(layerProtocolName)).append("\n");
    sb.append("    transferIntegrity: ").append(toIndentedString(transferIntegrity)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    transferCapacity: ").append(toIndentedString(transferCapacity)).append("\n");
    sb.append("    transferCost: ").append(toIndentedString(transferCost)).append("\n");
    sb.append("    aggregatedNodeEdgePoint: ").append(toIndentedString(aggregatedNodeEdgePoint)).append("\n");
    sb.append("    ownedNodeEdgePoint: ").append(toIndentedString(ownedNodeEdgePoint)).append("\n");
    sb.append("    transferTiming: ").append(toIndentedString(transferTiming)).append("\n");
    sb.append("    encapTopology: ").append(toIndentedString(encapTopology)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

