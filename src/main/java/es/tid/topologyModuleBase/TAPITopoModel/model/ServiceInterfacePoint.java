/*
 * tapi-topology API
 * tapi-topology API generated from tapi-topology.yang
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package es.tid.topologyModuleBase.TAPITopoModel.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.LayerProtocol;
import es.tid.topologyModuleBase.TAPITopoModel.model.LifecycleStatePac;
import es.tid.topologyModuleBase.TAPITopoModel.model.NameAndValue;
import es.tid.topologyModuleBase.TAPITopoModel.model.ResourceSpec;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import javax.validation.constraints.*;

/**
 * The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers.  The structure of LTP supports all transport protocols including circuit and packet forms.
 */
@ApiModel(description = "The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers.  The structure of LTP supports all transport protocols including circuit and packet forms.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-03-31T10:56:12.255Z")
public class ServiceInterfacePoint   {
  @JsonProperty("label")
  private List<NameAndValue> label = new ArrayList<NameAndValue>();

  @JsonProperty("uuid")
  private String uuid = null;

  @JsonProperty("name")
  private List<NameAndValue> name = new ArrayList<NameAndValue>();

  @JsonProperty("layer-protocol")
  private List<LayerProtocol> layerProtocol = new ArrayList<LayerProtocol>();

  /**
   * Gets or Sets direction
   */
  public enum DirectionEnum {
    BIDIRECTIONAL("bidirectional"),
    
    SINK("sink"),
    
    SOURCE("source"),
    
    UNDEFINED_OR_UNKNOWN("undefined-or-unknown");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String text) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
  }

  @JsonProperty("direction")
  private DirectionEnum direction = null;

  @JsonProperty("state")
  private LifecycleStatePac state = null;

  public ServiceInterfacePoint label(List<NameAndValue> label) {
    this.label = label;
    return this;
  }

  public ServiceInterfacePoint addLabelItem(NameAndValue labelItem) {
    this.label.add(labelItem);
    return this;
  }

   /**
   * List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.
   * @return label
  **/
  @JsonProperty("label")
  @ApiModelProperty(value = "List of labels.A property of an entity with a value that is not expected to be unique and is allowed to change. A label carries no semantics with respect to the purpose of the entity and has no effect on the entity behavior or state.")
  public List<NameAndValue> getLabel() {
    return label;
  }

  public void setLabel(List<NameAndValue> label) {
    this.label = label;
  }

  public ServiceInterfacePoint uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

   /**
   * UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6
   * @return uuid
  **/
  @JsonProperty("uuid")
  @ApiModelProperty(value = "UUID: An identifier that is universally unique within an identifier space, where the identifier space is itself globally unique, and immutable. An UUID carries no semantics with respect to the purpose or state of the entity. UUID here uses string representation as defined in RFC 4122.  The canonical representation uses lowercase characters. Pattern: [0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-' + '[0-9a-fA-F]{4}-[0-9a-fA-F]{12}  Example of a UUID in string representation: f81d4fae-7dec-11d0-a765-00a0c91e6bf6")
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }

  public ServiceInterfacePoint name(List<NameAndValue> name) {
    this.name = name;
    return this;
  }

  public ServiceInterfacePoint addNameItem(NameAndValue nameItem) {
    this.name.add(nameItem);
    return this;
  }

   /**
   * List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.
   * @return name
  **/
  @JsonProperty("name")
  @ApiModelProperty(value = "List of names. A property of an entity with a value that is unique in some namespace but may change during the life of the entity. A name carries no semantics with respect to the purpose of the entity.")
  public List<NameAndValue> getName() {
    return name;
  }

  public void setName(List<NameAndValue> name) {
    this.name = name;
  }

  public ServiceInterfacePoint layerProtocol(List<LayerProtocol> layerProtocol) {
    this.layerProtocol = layerProtocol;
    return this;
  }

  public ServiceInterfacePoint addLayerProtocolItem(LayerProtocol layerProtocolItem) {
    this.layerProtocol.add(layerProtocolItem);
    return this;
  }

   /**
   * Get layerProtocol
   * @return layerProtocol
  **/
  @JsonProperty("layer-protocol")
  @ApiModelProperty(value = "")
  public List<LayerProtocol> getLayerProtocol() {
    return layerProtocol;
  }

  public void setLayerProtocol(List<LayerProtocol> layerProtocol) {
    this.layerProtocol = layerProtocol;
  }

  public ServiceInterfacePoint direction(DirectionEnum direction) {
    this.direction = direction;
    return this;
  }

   /**
   * Get direction
   * @return direction
  **/
  @JsonProperty("direction")
  @ApiModelProperty(value = "")
  public DirectionEnum getDirection() {
    return direction;
  }

  public void setDirection(DirectionEnum direction) {
    this.direction = direction;
  }

  public ServiceInterfacePoint state(LifecycleStatePac state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @JsonProperty("state")
  @ApiModelProperty(value = "")
  public LifecycleStatePac getState() {
    return state;
  }

  public void setState(LifecycleStatePac state) {
    this.state = state;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInterfacePoint serviceInterfacePoint = (ServiceInterfacePoint) o;
    return Objects.equals(this.label, serviceInterfacePoint.label) &&
        Objects.equals(this.uuid, serviceInterfacePoint.uuid) &&
        Objects.equals(this.name, serviceInterfacePoint.name) &&
        Objects.equals(this.layerProtocol, serviceInterfacePoint.layerProtocol) &&
        Objects.equals(this.direction, serviceInterfacePoint.direction) &&
        Objects.equals(this.state, serviceInterfacePoint.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, uuid, name, layerProtocol, direction, state);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInterfacePoint {\n");
    
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    layerProtocol: ").append(toIndentedString(layerProtocol)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

